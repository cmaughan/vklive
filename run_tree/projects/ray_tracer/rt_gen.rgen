#version 460
#extension GL_EXT_ray_tracing : enable
#extension GL_GOOGLE_include_directive : enable

#include "default_parameters.h"

layout(binding = 0, set = 1) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, set = 1, rgba8) uniform image2D RayTraceTarget;

struct RayPayload 
{
    vec3 color;
    float distance;
    vec3 normal;
    float reflector;
};

layout(location = 0) rayPayloadEXT RayPayload rayPayload;

const int MAX_RECURSION = 4;

void main() 
{
    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);
    vec2 d = inUV * 2.0 - 1.0;

    vec4 origin = ubo.viewInverse * vec4(0,0,0,1);
    vec4 target = ubo.projectionInverse * vec4(d.x, d.y, 1, 1) ;
    vec4 direction = ubo.viewInverse*vec4(normalize(target.xyz), 0) ;

    const uint rayFlags = gl_RayFlagsOpaqueEXT;
    const uint cullMask = 0xff;
    const float tmin = 0.001;
    const float tmax = 10000.0;

    rayPayload.color = vec3(0.0);
    vec3 color = vec3(0.0);

    for (int i = 0; i < MAX_RECURSION; i++) 
    {
        traceRayEXT(topLevelAS, rayFlags, cullMask, 0, 0, 0, origin.xyz, tmin, direction.xyz, tmax, 0);
        vec3 hitColor = rayPayload.color;

        // miss 
        if (rayPayload.distance < 0.0f)
        {
            color += hitColor* .11;
            break;
        } 
        // hit a triangle
        else 
        {
            color += (hitColor * 1.0);
            const vec4 hitPos = origin + direction * rayPayload.distance;
            origin.xyz = hitPos.xyz + rayPayload.normal * 0.001f;
            direction.xyz = rayPayload.normal;
            
        }
    }

    imageStore(RayTraceTarget, ivec2(gl_LaunchIDEXT.xy), vec4(color, 1.0));
}